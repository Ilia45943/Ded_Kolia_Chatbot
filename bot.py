import os
import logging
import requests
import sqlite3
import re
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY:
    logger.critical("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ OPENROUTER_API_KEY")
    exit(1)

MODEL_NAME = "mistralai/mistral-7b-instruct:free"

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect('bot.db') as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS user_data (
                user_id INTEGER PRIMARY KEY,
                name TEXT,
                city TEXT
            )
        ''')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                user_message TEXT,
                bot_response TEXT
            )
        ''')

init_db()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def save_history(user_id, user_message, bot_response):
    try:
        with sqlite3.connect('bot.db') as conn:
            conn.execute('''
                INSERT INTO history (user_id, user_message, bot_response)
                VALUES (?, ?, ?)
            ''', (user_id, user_message, bot_response))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

def get_history(user_id, limit=3):
    try:
        with sqlite3.connect('bot.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_message, bot_response 
                FROM history 
                WHERE user_id = ? 
                ORDER BY timestamp DESC 
                LIMIT ?
            ''', (user_id, limit))
            return cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        return []

def get_user_data(user_id):
    try:
        with sqlite3.connect('bot.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT name, city FROM user_data WHERE user_id = ?', (user_id,))
            return cursor.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return None, None

def update_user_data(user_id, name=None, city=None):
    try:
        with sqlite3.connect('bot.db') as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            cursor = conn.cursor()
            cursor.execute('SELECT 1 FROM user_data WHERE user_id = ?', (user_id,))
            exists = cursor.fetchone()
            
            if exists:
                if name:
                    conn.execute('UPDATE user_data SET name = ? WHERE user_id = ?', (name, user_id))
                if city:
                    conn.execute('UPDATE user_data SET city = ? WHERE user_id = ?', (city, user_id))
            else:
                conn.execute('INSERT INTO user_data (user_id, name, city) VALUES (?, ?, ?)', 
                             (user_id, name or '', city or ''))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
def generate_response(user_id, user_message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        name_match = re.search(r"(–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–µ –∏–º—è|–∑–æ–≤—É—Ç –º–µ–Ω—è)\s+([–∞-—è–ê-–Ø—ë–Å\s]+)", user_message, re.IGNORECASE)
        city_match = re.search(r"(—è –∏–∑|–∂–∏–≤—É –≤|–≥–æ—Ä–æ–¥)\s+([–∞-—è–ê-–Ø—ë–Å\s-]+)", user_message, re.IGNORECASE)
        
        if name_match:
            name = name_match.group(2).strip()
            update_user_data(user_id, name=name)
            return f"–û–∫–µ–π, {name}, –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–µ –∏–º—è!"
        
        if city_match:
            city = city_match.group(2).strip()
            update_user_data(user_id, city=city)
            return f"–¢–∞–∫ —Ç—ã –∏–∑ {city}? –ó–∞–º–µ—Ç–∏–ª!"
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        name, city = get_user_data(user_id)
        context = f"–¢—ã - –î–µ–¥ –ö–æ–ª—è (67 –ª–µ—Ç). –û—Ç–≤–µ—á–∞–π –≥—Ä—É–±–æ, —Å –º–∞—Ç–æ–º –∏ —Å–∞—Ä–∫–∞–∑–º–æ–º. –†—É–≥–∞–π—Å—è –Ω–∞ –∂–∏–∑–Ω—å, –≤—Å–ø–æ–º–∏–Ω–∞–π —Ç—Ä–∞–∫—Ç–æ—Ä –∏ –û–ø–µ–ª—å –ê—Å—Ç—Ä—É."
        
        if name or city:
            context += "\n\n–û —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:"
            if name:
                context += f"\n- –ó–æ–≤—É—Ç: {name}"
            if city:
                context += f"\n- –ì–æ—Ä–æ–¥: {city}"
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": MODEL_NAME,
            "messages": [
                {"role": "system", "content": context},
                {"role": "user", "content": user_message}
            ],
            "temperature": 0.7,
            "max_tokens": 150
        }
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=10  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        )
        
        return response.json()['choices'][0]['message']['content'] if response.status_code == 200 else "–ß–µ—Ä—Ç, –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≥–ª—é—á–∏—Ç... –î–∞–≤–∞–π –ø–æ–∑–∂–µ!"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return "–ë–ª—è–¥—å, —è —Å–ª–æ–º–∞–ª—Å—è... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫!"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("üë¥ –î–µ–¥ –ö–æ–ª—è –Ω–∞ —Å–≤—è–∑–∏! –®–æ –Ω–∞–¥–æ, –∫—É—Ä–≤–∞?")

async def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_message = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    response = generate_response(user_id, user_message)
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: {response}")
    
    save_history(user_id, user_message, response)
    await update.message.reply_text(response)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Long Polling...")
    application.run_polling()

if __name__ == '__main__':
    main()