import os
import logging
import requests
import json
import sys
import asyncio

from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REQUIRED_VARS = ['TELEGRAM_TOKEN', 'OPENROUTER_API_KEY']
for var in REQUIRED_VARS:
    if not os.getenv(var):
        logger.critical(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
PORT = int(os.environ.get('PORT', 10000))
HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME', 'localhost')
MODEL_NAME = "mistralai/mistral-7b-instruct:free"

app = Flask(__name__)

# –ö–ª–∞—Å—Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞
class AIAssistant:
    def __init__(self):
        self.default_responses = [
            "–°–µ—Ä–≤–µ—Ä –æ–ø—è—Ç—å –¥—É—Ä–∏—Ç... –ß—ë —Ö–æ—Ç–µ–ª, –∫—É—Ä–≤–∞?",
            "–î–∞ –±–ª—è–¥—å, –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤ –æ—Ç–ø—É—Å–∫–µ. –ê —Ç—ã –∫–∞–∫ —Ç–∞–º?",
            "–Å–±—É—à–∫–∏-–≤–æ—Ä–æ–±—É—à–∫–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–¥–±—É—Ö–Ω—É–ª–∏. –ù—É —á—ë —Ä–∞—Å—Å–∫–∞–∂–µ—à—å?"
        ]

    def generate_response(self, user_message):
        try:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }

            payload = {
                "model": MODEL_NAME,
                "messages": [
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã ‚Äî –î–µ–¥ –ö–æ–ª—è, –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–π –¥–µ–¥ 67 –ª–µ—Ç. "
                            "–ì—Ä—É–±–∏—è–Ω, –º–∞—Ç–µ—Ä–∏—à—å—Å—è, —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º, –≤—Å–ø–æ–º–∏–Ω–∞–µ—à—å —Ç—Ä–∞–∫—Ç–æ—Ä, –û–ø–µ–ª—å –ê—Å—Ç—Ä—É 96-–≥–æ –≥–æ–¥–∞, "
                            "–∂–µ–Ω—É –±–∞–±—É –õ—é–¥—É, –∫—É—Ä–µ–π –∏ —Å–≤–∏–Ω–µ–π. –ü—å—ë—à—å —Å –¥—Ä—É–≥–æ–º –§–µ–¥–µ–π. –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–æ–º —è–∑—ã–∫–µ."
                        )
                    },
                    {"role": "user", "content": user_message}
                ],
                "temperature": 0.85,
                "max_tokens": 300
            }

            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                data=json.dumps(payload, ensure_ascii=False).encode('utf-8'),
                timeout=10
            )

            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                logger.error(f"‚ùå OpenRouter API: {response.status_code} ‚Äî {response.text}")
                return self.default_responses[0]

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {str(e)}")
            return self.default_responses[1]

ai_assistant = AIAssistant()

# Telegram-—Ö–µ–Ω–¥–ª–µ—Ä—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë¥ –î–µ–¥ –ö–æ–ª—è –Ω–∞ —Å–≤—è–∑–∏! –®–æ –Ω–∞–¥–æ, –∫—É—Ä–≤–∞?")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_message = update.message.text
        response = ai_assistant.generate_response(user_message)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("–ë–ª—è–¥—å, —á—ë—Ç —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def create_application():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return application

telegram_app = create_application()

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def home():
    return "‚úÖ –î–µ–¥ –ö–æ–ª—è –∑–∞–ø—É—â–µ–Ω!"

@app.route('/test_ai')
def test_ai():
    try:
        test_input = "–ù—É –∫–∞–∫ —Ç—ã, –î–µ–¥ –ö–æ–ª—è?"
        result = ai_assistant.generate_response(test_input)
        return jsonify({"status": "success", "input": test_input, "response": result})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/telegram_webhook', methods=['POST'])
async def telegram_webhook():
    try:
        update = Update.de_json(request.json, telegram_app.bot)
        await telegram_app.update_queue.put(update)
        return '', 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Webhook: {str(e)}")
        return jsonify({"status": "error"}), 500

# –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
async def run_bot():
    try:
        webhook_url = f"https://{HOSTNAME}/telegram_webhook"
        await telegram_app.bot.set_webhook(webhook_url)
        await telegram_app.initialize()
        await telegram_app.start()
        await telegram_app.updater.start_polling()
        await telegram_app.updater.idle()
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

@app.before_first_request
def activate_bot():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –î–µ–¥–∞ –ö–æ–ª—é...")
    asyncio.run(run_bot())

if __name__ == '__main__':
    logger.info(f"üåç Flask –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    app.run(host='0.0.0.0', port=PORT, use_reloader=False)
