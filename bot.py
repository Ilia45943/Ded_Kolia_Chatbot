import os
import logging
import requests
import json
import asyncio
from flask import Flask, request, jsonify
from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    Updater,
    CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
REQUIRED_VARS = ['TELEGRAM_TOKEN', 'OPENROUTER_API_KEY']
for var in REQUIRED_VARS:
    if not os.getenv(var):
        logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")
        exit(1)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
PORT = int(os.environ.get('PORT', 10000))
HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME', 'localhost')

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
MODEL_NAME = "mistralai/mistral-7b-instruct:free"

app = Flask(__name__)

class AIAssistant:
    def __init__(self):
        self.default_responses = [
            "–ß—ë—Ä—Ç, –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≥–ª—é—á–∏—Ç... –î–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º?",
            "–≠—Ö, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ –¥—É—Ö–µ... –ö–∞–∫ —Å–∞–º-—Ç–æ?",
            "–ö—É—Ä–≤–∞, —Å–µ—Ä–≤–µ—Ä–∞ —Ç—É–ø—è—Ç! –ù—É —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ?"
        ]

    async def generate_response_async(self, user_message):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter"""
        try:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }

            payload = {
                "model": MODEL_NAME,
                "messages": [
                    {
                        "role": "system", 
                        "content": "–¢—ã - –î–µ–¥ –ö–æ–ª—è (67 –ª–µ—Ç). –û—Ç–≤–µ—á–∞–π –≥—Ä—É–±–æ, —Å –º–∞—Ç–æ–º –∏ —Å–∞—Ä–∫–∞–∑–º–æ–º. –†—É–≥–∞–π—Å—è –Ω–∞ –∂–∏–∑–Ω—å, –≤—Å–ø–æ–º–∏–Ω–∞–π —Ç—Ä–∞–∫—Ç–æ—Ä –∏ –û–ø–µ–ª—å –ê—Å—Ç—Ä—É."
                    },
                    {
                        "role": "user",
                        "content": user_message
                    }
                ],
                "temperature": 0.8,
                "max_tokens": 300
            }

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=10
                ) as response:
                    
                    if response.status == 200:
                        data = await response.json()
                        return data['choices'][0]['message']['content']
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                        return self.default_responses[0]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return self.default_responses[1]

ai_assistant = AIAssistant()

# Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: CallbackContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_text("üë¥ –î–µ–¥ –ö–æ–ª—è –Ω–∞ —Å–≤—è–∑–∏! –®–æ –Ω–∞–¥–æ, –∫—É—Ä–≤–∞?")

async def handle_message(update: Update, context: CallbackContext):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        response = await ai_assistant.generate_response_async(update.message.text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: {response}")
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("–ë–ª—è–¥—å, —è —Å–ª–æ–º–∞–ª—Å—è... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
def create_application():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    return application

telegram_app = create_application()

# Flask —Ä–æ—É—Ç—ã
@app.route('/')
def home():
    return "ü§ñ –î–µ–¥ –ö–æ–ª—è –≤ —Ä–∞–±–æ—Ç–µ!"

@app.route('/test_ai')
def test_ai():
    try:
        test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–æ—É—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        response = asyncio.run(ai_assistant.generate_response_async(test_message))
        return jsonify({
            "status": "success",
            "request": test_message,
            "response": response
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/telegram_webhook', methods=['POST'])
def telegram_webhook():
    """–°–ò–ù–•–†–û–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        update = Update.de_json(request.json, telegram_app.bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        asyncio.run_coroutine_threadsafe(
            telegram_app.process_update(update), 
            telegram_app.updater.bot.loop
        )
        
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return jsonify({"status": "error"}), 500

async def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        webhook_url = f"https://{HOSTNAME}/telegram_webhook"
        await telegram_app.bot.set_webhook(webhook_url)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(run_bot())
    loop.run_forever()  # –í–∞–∂–Ω–æ: –¥–µ—Ä–∂–∏–º –ø–µ—Ç–ª—é –∞–∫—Ç–∏–≤–Ω–æ–π

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π async
    logger.info(f"üåê –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if os.getenv('ENV') == 'development':
        app.run(host='0.0.0.0', port=PORT, use_reloader=False)
    else:
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ASGI-—Å–µ—Ä–≤–µ—Ä
        from hypercorn.asyncio import serve
        from hypercorn.config import Config
        
        config = Config()
        config.bind = [f"0.0.0.0:{PORT}"]
        asyncio.run(serve(app, config))
