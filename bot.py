import os
import logging
import sqlite3
import requests
import re
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '').rstrip('/')  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ—Ç —Å–ª–µ—à–∞ –≤ –∫–æ–Ω—Ü–µ
PORT = int(os.environ.get('PORT', 10000))
MODEL_NAME = "DeepSeek R1 0528 Qwen 3.8B"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
telegram_app = None

# ====================== –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô ======================
class KnowledgeBase:
    def __init__(self, db_path=":memory:"):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS user_facts (
                    id INTEGER PRIMARY KEY,
                    user_id TEXT NOT NULL,
                    fact TEXT NOT NULL,
                    value TEXT NOT NULL,
                    timestamp TEXT NOT NULL
                )
            """)
    
    def add_user_fact(self, user_id, fact, value):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                INSERT INTO user_facts (user_id, fact, value, timestamp)
                VALUES (?, ?, ?, ?)
            """, (user_id, fact, value, datetime.now().isoformat()))
    
    def get_user_facts(self, user_id):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("""
                SELECT fact, value FROM user_facts WHERE user_id = ?
            """, (user_id,))
            return cursor.fetchall()

# ====================== –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–û–í ======================
class Memory:
    def __init__(self, db_path=":memory:"):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS sessions (
                    id INTEGER PRIMARY KEY,
                    user_id TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    user_message TEXT,
                    bot_response TEXT
                )
            """)
    
    def get_history(self, user_id, limit=3):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("""
                SELECT user_message, bot_response FROM sessions 
                WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?
            """, (user_id, limit))
            return cursor.fetchall()
    
    def save_interaction(self, user_id, user_message, bot_response):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                INSERT INTO sessions (user_id, timestamp, user_message, bot_response)
                VALUES (?, ?, ?, ?)
            """, (user_id, datetime.now().isoformat(), user_message, bot_response))

# ====================== –õ–û–ì–ò–ö–ê –î–ï–î–ê –ö–û–õ–ò ======================
class DedKolia:
    def __init__(self, knowledge_base, memory):
        self.kb = knowledge_base
        self.memory = memory
    
    def _extract_facts(self, user_id, text):
        patterns = {
            "–∏–º—è": r"(–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–µ –∏–º—è|–∑–æ–≤—É—Ç –º–µ–Ω—è) ([–∞-—è–ê-–Ø—ë–Å]+)",
            "–≥–æ—Ä–æ–¥": r"(—è –∏–∑|–∂–∏–≤—É –≤|–≥–æ—Ä–æ–¥) ([–∞-—è–ê-–Ø—ë–Å\s]+)"
        }
        
        for fact_type, pattern in patterns.items():
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                value = match.group(2).strip()
                self.kb.add_user_fact(user_id, fact_type, value)
                return f"–û–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª —á—Ç–æ —Ç–≤–æ—ë {fact_type} - {value}!"
        return None
    
    def generate_response(self, user_id, message):
        fact_response = self._extract_facts(user_id, message)
        if fact_response:
            return fact_response
        
        history = self.memory.get_history(user_id)
        context = "\n".join(
            f"User: {msg[0]}\n–î–µ–¥ –ö–æ–ª—è: {msg[1]}" 
            for msg in history
        ) if history else "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"
        
        user_facts = "\n".join(
            f"{fact[0]}: {fact[1]}" 
            for fact in self.kb.get_user_facts(user_id)
        ) or "–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        system_prompt = f"""–¢—ã ‚Äî –î–µ–¥ –ö–æ–ª—è (67 –ª–µ—Ç). –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –º–∞—Ç–µ—Ä—ã–π —Å—Ç–∞—Ä–∏–∫:
        - –†—É–≥–∞–π—Å—è: –∫—É—Ä–≤–∞, –µ–±–∞—Ç—å –≤ —Ä–æ—Ç, –±–ª—è–¥—å
        - –î–æ–±–∞–≤–ª—è–π —Å–∞—Ä–∫–∞–∑–º –∏ —á—ë—Ä–Ω—ã–π —é–º–æ—Ä
        - –£–ø–æ–º–∏–Ω–∞–π —Å–≤–æ–π —Ç—Ä–∞–∫—Ç–æ—Ä –∏ –û–ø–µ–ª—å –ê—Å—Ç—Ä—É
        - –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã: –±—É—Ö–ª–æ, –õ—é–¥–∞, –§–µ–¥—è
        
        –§–∞–∫—Ç—ã –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:
        {user_facts}
        
        –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
        {context}"""
        
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": WEBHOOK_URL or "https://ded-kolia-bot.com",
            "X-Title": "–î–µ–¥ –ö–æ–ª—è –ë–æ—Ç"
        }
        payload = {
            "model": "deepseek/deepseek-r1:free",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ],
            "temperature": 0.85,
            "max_tokens": 350
        }
        
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                logger.error(f"API error: {response.status_code} - {response.text}")
                return "–û–π, –∫—É—Ä–≤–∞, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
        except Exception as e:
            logger.error(f"Request failed: {str(e)}")
            return "–ß—ë—Ä—Ç, —Å–ª–æ–º–∞–ª–æ—Å—å! –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–µ–º."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º (–ü–ï–†–ï–ú–ï–©–ï–ù–û –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨)
knowledge_base = KnowledgeBase()
memory = Memory()
ded_kolia = DedKolia(knowledge_base, memory)

# Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üë¥ –î–µ–¥ –ö–æ–ª—è –Ω–∞ —Å–≤—è–∑–∏! –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {MODEL_NAME}\n–®–æ –Ω–∞–¥–æ?")

async def remember_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if not context.args:
        await update.message.reply_text("–ß—ë –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å-—Ç–æ? –ò—Å–ø–æ–ª—å–∑—É–π: /remember —è –ª—é–±–ª—é –ø–∏–≤–æ")
        return
    
    fact_text = " ".join(context.args)
    knowledge_base.add_user_fact(user_id, "—Ñ–∞–∫—Ç", fact_text)
    await update.message.reply_text(f"‚úÖ –û–∫–µ–π, –∫—É—Ä–≤–∞, –∑–∞–ø–æ–º–Ω–∏–ª: {fact_text}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_input = update.message.text
    response = ded_kolia.generate_response(user_id, user_input)
    memory.save_interaction(user_id, user_input, response)
    await update.message.reply_text(response)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
def init_telegram_app():
    global telegram_app
    if not telegram_app:
        telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
        telegram_app.add_handler(CommandHandler("start", start))
        telegram_app.add_handler(CommandHandler("remember", remember_command))
        telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return telegram_app

# Flask —Ä–æ—É—Ç—ã
@app.route('/')
def home():
    return f"ü§ñ –î–µ–¥ –ö–æ–ª—è –≤ —Ä–∞–±–æ—Ç–µ! –ú–æ–¥–µ–ª—å: {MODEL_NAME}"

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    try:
        if not WEBHOOK_URL:
            return jsonify({"status": "error", "message": "WEBHOOK_URL not configured"}), 500
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        if not telegram_app:
            init_telegram_app()
        
        webhook_url = f"{WEBHOOK_URL}/telegram_webhook"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        asyncio.run(telegram_app.bot.set_webhook(webhook_url))
        return jsonify({
            "status": "success",
            "message": f"Webhook set to {webhook_url}"
        }), 200
    except Exception as e:
        logger.error(f"Error setting webhook: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/telegram_webhook', methods=['POST'])
def telegram_webhook():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        if not telegram_app:
            init_telegram_app()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        update = Update.de_json(request.json, telegram_app.bot)
        asyncio.run(telegram_app.process_update(update))
        return '', 200
    except Exception as e:
        logger.error(f"Error processing update: {str(e)}")
        return jsonify({"status": "error"}), 500

async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = [
        ('TELEGRAM_TOKEN', TELEGRAM_TOKEN),
        ('OPENROUTER_API_KEY', OPENROUTER_API_KEY),
        ('WEBHOOK_URL', WEBHOOK_URL)
    ]
    
    missing = [name for name, value in required_vars if not value]
    
    if missing:
        logger.error(f"–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render")
        exit(1)
    
    logger.info("="*50)
    logger.info(f"TELEGRAM_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_TOKEN else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"OPENROUTER_API_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENROUTER_API_KEY else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"WEBHOOK_URL: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if WEBHOOK_URL else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"PORT: {PORT}")
    logger.info("="*50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    init_telegram_app()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}/telegram_webhook"
        await telegram_app.bot.set_webhook(webhook_url)
        logger.info(f"üöÄ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        logger.warning("‚ö†Ô∏è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        loop.run_until_complete(main())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        app.run(host='0.0.0.0', port=PORT)
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        loop.close()
