import os
import logging
import sqlite3
import requests
import re
from datetime import datetime
from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
PORT = 10000  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç 10000
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
MODEL_NAME = "DeepSeek R1 0528 Qwen 3.8B"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
flask_app = Flask(__name__)

# ====================== –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô ======================
class KnowledgeBase:
    def __init__(self, db_path="/tmp/knowledge.db"):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS user_facts (
                    id INTEGER PRIMARY KEY,
                    user_id TEXT NOT NULL,
                    fact TEXT NOT NULL,
                    value TEXT NOT NULL,
                    timestamp TEXT NOT NULL
                )
            """)
            conn.commit()
    
    def add_user_fact(self, user_id, fact, value):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                INSERT INTO user_facts (user_id, fact, value, timestamp)
                VALUES (?, ?, ?, ?)
            """, (user_id, fact, value, datetime.now().isoformat()))
            conn.commit()
    
    def get_user_facts(self, user_id):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("""
                SELECT fact, value FROM user_facts WHERE user_id = ?
            """, (user_id,))
            return cursor.fetchall()

# ====================== –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–û–í ======================
class Memory:
    def __init__(self, db_path="/tmp/sessions.db"):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS sessions (
                    id INTEGER PRIMARY KEY,
                    user_id TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    user_message TEXT,
                    bot_response TEXT
                )
            """)
            conn.commit()
    
    def get_history(self, user_id, limit=3):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("""
                SELECT user_message, bot_response FROM sessions 
                WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?
            """, (user_id, limit))
            return cursor.fetchall()
    
    def save_interaction(self, user_id, user_message, bot_response):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                INSERT INTO sessions (user_id, timestamp, user_message, bot_response)
                VALUES (?, ?, ?, ?)
            """, (user_id, datetime.now().isoformat(), user_message, bot_response))
            conn.commit()

# ====================== –õ–û–ì–ò–ö–ê –î–ï–î–ê –ö–û–õ–ò ======================
class DedKolia:
    def __init__(self, knowledge_base, memory):
        self.kb = knowledge_base
        self.memory = memory
        self.model = "deepseek/deepseek-r1:free"
    
    def _extract_facts(self, user_id, text):
        patterns = {
            "–∏–º—è": r"(–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–µ –∏–º—è|–∑–æ–≤—É—Ç –º–µ–Ω—è) ([–∞-—è–ê-–Ø—ë–Å]+)",
            "–≥–æ—Ä–æ–¥": r"(—è –∏–∑|–∂–∏–≤—É –≤|–≥–æ—Ä–æ–¥) ([–∞-—è–ê-–Ø—ë–Å\s]+)"
        }
        
        for fact_type, pattern in patterns.items():
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                value = match.group(2).strip()
                self.kb.add_user_fact(user_id, fact_type, value)
                return f"–û–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª —á—Ç–æ —Ç–≤–æ—ë {fact_type} - {value}!"
        return None
    
    def generate_response(self, user_id, message):
        fact_response = self._extract_facts(user_id, message)
        if fact_response:
            return fact_response
        
        history = self.memory.get_history(user_id)
        context = "\n".join(
            f"User: {msg[0]}\n–î–µ–¥ –ö–æ–ª—è: {msg[1]}" 
            for msg in history
        ) if history else "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"
        
        user_facts = "\n".join(
            f"{fact[0]}: {fact[1]}" 
            for fact in self.kb.get_user_facts(user_id)
        ) or "–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        system_prompt = f"""–¢—ã ‚Äî –î–µ–¥ –ö–æ–ª—è (67 –ª–µ—Ç). –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –º–∞—Ç–µ—Ä—ã–π —Å—Ç–∞—Ä–∏–∫:
        - –†—É–≥–∞–π—Å—è: –∫—É—Ä–≤–∞, –µ–±–∞—Ç—å –≤ —Ä–æ—Ç, –±–ª—è–¥—å
        - –î–æ–±–∞–≤–ª—è–π —Å–∞—Ä–∫–∞–∑–º –∏ —á—ë—Ä–Ω—ã–π —é–º–æ—Ä
        - –£–ø–æ–º–∏–Ω–∞–π —Å–≤–æ–π —Ç—Ä–∞–∫—Ç–æ—Ä –∏ –û–ø–µ–ª—å –ê—Å—Ç—Ä—É
        - –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã: –±—É—Ö–ª–æ, –õ—é–¥–∞, –§–µ–¥—è
        
        –§–∞–∫—Ç—ã –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:
        {user_facts}
        
        –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
        {context}"""
        
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": WEBHOOK_URL or "https://ded-kolia-bot.com",
            "X-Title": "–î–µ–¥ –ö–æ–ª—è –ë–æ—Ç"
        }
        payload = {
            "model": self.model,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ],
            "temperature": 0.85,
            "max_tokens": 350
        }
        
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                logger.error(f"API error: {response.status_code} - {response.text}")
                return "–û–π, –∫—É—Ä–≤–∞, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
        except Exception as e:
            logger.error(f"Request failed: {str(e)}")
            return "–ß—ë—Ä—Ç, —Å–ª–æ–º–∞–ª–æ—Å—å! –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–µ–º."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
knowledge_base = KnowledgeBase()
memory = Memory()
ded_kolia = DedKolia(knowledge_base, memory)

# Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üë¥ –î–µ–¥ –ö–æ–ª—è –Ω–∞ —Å–≤—è–∑–∏! –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {MODEL_NAME}\n–®–æ –Ω–∞–¥–æ?")

async def remember_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if not context.args:
        await update.message.reply_text("–ß—ë –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å-—Ç–æ? –ò—Å–ø–æ–ª—å–∑—É–π: /remember —è –ª—é–±–ª—é –ø–∏–≤–æ")
        return
    
    fact_text = " ".join(context.args)
    knowledge_base.add_user_fact(user_id, "—Ñ–∞–∫—Ç", fact_text)
    await update.message.reply_text(f"‚úÖ –û–∫–µ–π, –∫—É—Ä–≤–∞, –∑–∞–ø–æ–º–Ω–∏–ª: {fact_text}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_input = update.message.text
    response = ded_kolia.generate_response(user_id, user_input)
    memory.save_interaction(user_id, user_input, response)
    await update.message.reply_text(response)

# Flask —Ä–æ—É—Ç—ã
@flask_app.route('/')
def home():
    return f"ü§ñ –î–µ–¥ –ö–æ–ª—è –≤ —Ä–∞–±–æ—Ç–µ! –ú–æ–¥–µ–ª—å: {MODEL_NAME}"

@flask_app.route('/set_webhook', methods=['GET'])
async def set_webhook():
    try:
        bot = Bot(TOKEN)
        url = f"{WEBHOOK_URL}/telegram_webhook"
        await bot.set_webhook(url)
        return jsonify({"status": "success", "message": f"Webhook set to {url}"}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@flask_app.route('/telegram_webhook', methods=['POST'])
async def telegram_webhook():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("remember", remember_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    try:
        await application.initialize()
        update = Update.de_json(request.json, application.bot)
        await application.process_update(update)
        return '', 200
    except Exception as e:
        logger.error(f"Error processing update: {str(e)}")
        return jsonify({"status": "error"}), 500

if __name__ == '__main__':
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    logger.info("="*50)
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    logger.info(f"TELEGRAM_TOKEN: {'–£–°–¢–ê–ù–û–í–õ–ï–ù' if TOKEN else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
    logger.info(f"OPENROUTER_API_KEY: {'–£–°–¢–ê–ù–û–í–õ–ï–ù' if OPENROUTER_API_KEY else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
    logger.info(f"WEBHOOK_URL: {'–£–°–¢–ê–ù–û–í–õ–ï–ù' if WEBHOOK_URL else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
    logger.info(f"PORT: {PORT} (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
    logger.info("="*50)
    
    if not TOKEN or not OPENROUTER_API_KEY or not WEBHOOK_URL:
        logger.error("–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render –¥–æ–±–∞–≤–ª–µ–Ω—ã:")
        logger.error("1. TELEGRAM_TOKEN")
        logger.error("2. OPENROUTER_API_KEY")
        logger.error("3. WEBHOOK_URL")
        exit(1)
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT} —Å –º–æ–¥–µ–ª—å—é: {MODEL_NAME}...")
    flask_app.run(host='0.0.0.0', port=PORT)
