import os
import logging
import requests
from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
REQUIRED_VARS = ['TELEGRAM_TOKEN', 'OPENROUTER_API_KEY']
for var in REQUIRED_VARS:
    if not os.getenv(var):
        logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")
        exit(1)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '').rstrip('/')
PORT = int(os.environ.get('PORT', 10000))

# 3. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º)
MODELS = [
    "mistralai/mistral-7b-instruct:free",  # –ù–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
    "deepseek/deepseek-r1-0528-qwen3-8b:free",
    "openchat/openchat-7b:free"
]

app = Flask(__name__)
telegram_app = None

class AIAssistant:
    def __init__(self):
        self.current_model = MODELS[0]
        self.fallback_responses = [
            "–ß—ë—Ä—Ç, –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≥–ª—é—á–∏—Ç... –î–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º?",
            "–≠—Ö, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ –¥—É—Ö–µ... –ö–∞–∫ —Å–∞–º-—Ç–æ?",
            "–ö—É—Ä–≤–∞, —Å–µ—Ä–≤–µ—Ä–∞ —Ç—É–ø—è—Ç! –ù—É —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ?"
        ]

    async def generate_response(self, user_message: str) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π"""
        for model in MODELS:
            try:
                headers = {
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": WEBHOOK_URL or "https://ai-bot.com",
                    "X-Title": "–î–µ–¥ –ö–æ–ª—è –ë–æ—Ç"
                }

                payload = {
                    "model": model,
                    "messages": [
                        {
                            "role": "system",
                            "content": "–¢—ã - –î–µ–¥ –ö–æ–ª—è (67 –ª–µ—Ç). –û—Ç–≤–µ—á–∞–π –≥—Ä—É–±–æ, —Å –º–∞—Ç–æ–º –∏ —Å–∞—Ä–∫–∞–∑–º–æ–º."
                        },
                        {
                            "role": "user",
                            "content": user_message
                        }
                    ],
                    "temperature": 0.8,
                    "max_tokens": 300
                }

                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        "https://openrouter.ai/api/v1/chat/completions",
                        headers=headers,
                        json=payload,
                        timeout=15
                    ) as response:
                        
                        if response.status == 200:
                            data = await response.json()
                            self.current_model = model
                            return data['choices'][0]['message']['content']
                        
                        logger.warning(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {response.status}")
                        
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ {model}: {str(e)}")
                continue

        return self.fallback_responses[hash(user_message) % len(self.fallback_responses)]

ai = AIAssistant()

# 4. Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üë¥ –î–µ–¥ –ö–æ–ª—è –Ω–∞ —Å–≤—è–∑–∏! –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {ai.current_model}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = await ai.generate_response(update.message.text)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("–ë–ª—è–¥—å, —è —Å–ª–æ–º–∞–ª—Å—è... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º shutdown)
async def init_telegram():
    global telegram_app
    if not telegram_app:
        telegram_app = (
            Application.builder()
            .token(TELEGRAM_TOKEN)
            .post_init(post_init)
            .post_shutdown(post_shutdown)
            .build()
        )
        
        telegram_app.add_handler(CommandHandler("start", start))
        telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

async def post_init(app: Application):
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    if WEBHOOK_URL:
        await app.bot.set_webhook(f"{WEBHOOK_URL}/telegram_webhook")

async def post_shutdown(app: Application):
    logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
    await app.bot.delete_webhook()

# 6. Flask —Ä–æ—É—Ç—ã (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
@app.route('/')
def home():
    return jsonify({
        "status": "running",
        "model": ai.current_model,
        "webhook": bool(WEBHOOK_URL)
    })

@app.route('/telegram_webhook', methods=['POST'])
async def telegram_webhook():
    try:
        await init_telegram()
        update = Update.de_json(await request.json, telegram_app.bot)
        await telegram_app.process_update(update)
        return '', 200
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return jsonify({"status": "error"}), 500

# 7. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def run_app():
    import asyncio
    from threading import Thread

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_flask():
        app.run(host='0.0.0.0', port=PORT)

    Thread(target=run_flask).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    async def run_telegram():
        await init_telegram()
        if WEBHOOK_URL:
            await telegram_app.start()
            await telegram_app.updater.start_polling()  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        else:
            await telegram_app.run_polling()

    asyncio.run(run_telegram())

if __name__ == '__main__':
    logger.info("="*50)
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (WEBHOOK: {WEBHOOK_URL or 'POLLING'})")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {MODELS}")
    logger.info("="*50)

    try:
        run_app()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if telegram_app:
            asyncio.run(telegram_app.shutdown())
