import os
import logging
import sqlite3
import requests
import re
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from flask import Flask, request, jsonify

# ====================== –ù–ê–°–¢–†–û–ô–ö–ê ======================
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '').rstrip('/')
PORT = int(os.environ.get('PORT', 10000))
MODEL_NAME = "deepseek/deepseek-r1-0528-qwen3-8b:free"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
telegram_app = None
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# ====================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ======================
def get_db_connection(db_path=":memory:"):
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS user_facts (
                id INTEGER PRIMARY KEY,
                user_id TEXT NOT NULL,
                fact TEXT NOT NULL,
                value TEXT NOT NULL,
                timestamp TEXT NOT NULL
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS sessions (
                id INTEGER PRIMARY KEY,
                user_id TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                user_message TEXT,
                bot_response TEXT
            )
        """)

# ====================== –õ–û–ì–ò–ö–ê –ë–û–¢–ê ======================
class DedKolia:
    def __init__(self):
        init_db()
        self.default_responses = [
            "–ß—ë—Ä—Ç, –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≥–ª—é—á–∏—Ç... –ù—É –ª–∞–¥–Ω–æ, –±–µ–∑ –Ω–µ—ë –æ–±–æ–π–¥—ë–º—Å—è!",
            "–≠—Ö, —Å–µ–π—á–∞—Å –ò–ò –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç... –î–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º?",
            "–ö—É—Ä–≤–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –ø–æ–¥–≤–æ–¥–∏—Ç! –ù—É —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –¥–µ–ª–∞?",
            "–ë–ª—è–¥—å, –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Ç—É–ø–∏—Ç... –ê —Ç—ã –∫–∞–∫ —Å–∞–º?"
        ]

    def _extract_facts(self, user_id, text):
        try:
            patterns = {
                "–∏–º—è": r"(–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–µ –∏–º—è|–∑–æ–≤—É—Ç –º–µ–Ω—è) ([–∞-—è–ê-–Ø—ë–Å]+)",
                "–≥–æ—Ä–æ–¥": r"(—è –∏–∑|–∂–∏–≤—É –≤|–≥–æ—Ä–æ–¥) ([–∞-—è–ê-–Ø—ë–Å\s]+)"
            }
            
            for fact_type, pattern in patterns.items():
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    value = match.group(2).strip()
                    with get_db_connection() as conn:
                        conn.execute("""
                            INSERT INTO user_facts (user_id, fact, value, timestamp)
                            VALUES (?, ?, ?, ?)
                        """, (user_id, fact_type, value, datetime.now().isoformat()))
                    return f"–û–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª —á—Ç–æ —Ç–≤–æ—ë {fact_type} - {value}!"
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤: {str(e)}")
            return None

    def get_history(self, user_id, limit=3):
        try:
            with get_db_connection() as conn:
                cursor = conn.execute("""
                    SELECT user_message, bot_response FROM sessions 
                    WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?
                """, (user_id, limit))
                return cursor.fetchall()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            return []

    def save_interaction(self, user_id, user_message, bot_response):
        try:
            with get_db_connection() as conn:
                conn.execute("""
                    INSERT INTO sessions (user_id, timestamp, user_message, bot_response)
                    VALUES (?, ?, ?, ?)
                """, (user_id, datetime.now().isoformat(), user_message, bot_response))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {str(e)}")

    def generate_response(self, user_id, message):
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ñ–∞–∫—Ç—ã
            fact_response = self._extract_facts(user_id, message)
            if fact_response:
                return fact_response
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            response = self._try_ai_response(user_id, message)
            if response:
                return response
            
            # –ï—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            history = self.get_history(user_id)
            if history:
                return "–Ø –≤—Å—ë –ø–æ–º–Ω—é, –Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–µ–π—á–∞—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —á—Ç–æ-—Ç–æ –µ—â—ë?"
            
            return self.default_responses[hash(user_id) % len(self.default_responses)]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"

    def _try_ai_response(self, user_id, message):
        if not OPENROUTER_API_KEY:
            return None
            
        try:
            history = self.get_history(user_id)
            context = "\n".join(f"User: {msg[0]}\nBot: {msg[1]}" for msg in history) if history else "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"
            
            user_facts = []
            with get_db_connection() as conn:
                cursor = conn.execute("SELECT fact, value FROM user_facts WHERE user_id = ?", (user_id,))
                user_facts = cursor.fetchall()
            
            facts = "\n".join(f"{fact[0]}: {fact[1]}" for fact in user_facts) or "–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            system_prompt = f"""–¢—ã ‚Äî –î–µ–¥ –ö–æ–ª—è (67 –ª–µ—Ç). –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –º–∞—Ç–µ—Ä—ã–π —Å—Ç–∞—Ä–∏–∫:
            - –†—É–≥–∞–π—Å—è: –∫—É—Ä–≤–∞, –µ–±–∞—Ç—å –≤ —Ä–æ—Ç, –±–ª—è–¥—å
            - –î–æ–±–∞–≤–ª—è–π —Å–∞—Ä–∫–∞–∑–º –∏ —á—ë—Ä–Ω—ã–π —é–º–æ—Ä
            - –£–ø–æ–º–∏–Ω–∞–π —Å–≤–æ–π —Ç—Ä–∞–∫—Ç–æ—Ä –∏ –û–ø–µ–ª—å –ê—Å—Ç—Ä—É
            
            –§–∞–∫—Ç—ã –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:
            {facts}
            
            –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
            {context}"""
            
            response = requests.post(
                url="https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": WEBHOOK_URL or "https://ded-kolia-bot.com",
                    "X-Title": "–î–µ–¥ –ö–æ–ª—è –ë–æ—Ç"
                },
                json={
                    "model": MODEL_NAME,
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": message}
                    ],
                    "temperature": 0.85,
                    "max_tokens": 350
                },
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            return None
            
        except Exception as e:
            logger.warning(f"–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
ded_kolia = DedKolia()

# ====================== TELEGRAM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(f"üë¥ –î–µ–¥ –ö–æ–ª—è –Ω–∞ —Å–≤—è–∑–∏! –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {MODEL_NAME}\n–®–æ –Ω–∞–¥–æ?")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {str(e)}")

async def remember_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = str(update.message.from_user.id)
        if not context.args:
            await update.message.reply_text("–ß—ë –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å-—Ç–æ? –ò—Å–ø–æ–ª—å–∑—É–π: /remember —è –ª—é–±–ª—é –ø–∏–≤–æ")
            return
        
        fact_text = " ".join(context.args)
        with get_db_connection() as conn:
            conn.execute("""
                INSERT INTO user_facts (user_id, fact, value, timestamp)
                VALUES (?, '—Ñ–∞–∫—Ç', ?, ?)
            """, (user_id, fact_text, datetime.now().isoformat()))
        await update.message.reply_text(f"‚úÖ –û–∫–µ–π, –∫—É—Ä–≤–∞, –∑–∞–ø–æ–º–Ω–∏–ª: {fact_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /remember: {str(e)}")
        await update.message.reply_text("–ë–ª—è–¥—å, –Ω–µ –∑–∞–ø–æ–º–Ω–∏–ª–æ—Å—å... –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑?")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = str(update.message.from_user.id)
        user_input = update.message.text
        
        response = ded_kolia.generate_response(user_id, user_input)
        ded_kolia.save_interaction(user_id, user_input, response)
        
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("–û–π, –∫—É—Ä–≤–∞, —è —Å–ª–æ–º–∞–ª—Å—è... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# ====================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM ======================
def init_telegram():
    global telegram_app
    if telegram_app is None:
        try:
            telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
            telegram_app.add_handler(CommandHandler("start", start))
            telegram_app.add_handler(CommandHandler("remember", remember_command))
            telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
            loop.run_until_complete(telegram_app.initialize())
            loop.run_until_complete(telegram_app.start())
            
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {str(e)}")
            raise

# ====================== FLASK –†–û–£–¢–´ ======================
@app.route('/')
def home():
    return f"ü§ñ –î–µ–¥ –ö–æ–ª—è –≤ —Ä–∞–±–æ—Ç–µ! –ú–æ–¥–µ–ª—å: {MODEL_NAME}"

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    try:
        if not WEBHOOK_URL:
            return jsonify({"status": "error", "message": "WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}), 400
        
        init_telegram()
        webhook_url = f"{WEBHOOK_URL}/telegram_webhook"
        
        loop.run_until_complete(telegram_app.bot.set_webhook(webhook_url))
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
        return jsonify({
            "status": "success",
            "message": f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}",
            "bot_info": {
                "username": telegram_app.bot.username,
                "id": telegram_app.bot.id
            }
        }), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/telegram_webhook', methods=['POST'])
def telegram_webhook():
    try:
        if telegram_app is None:
            init_telegram()
        
        update = Update.de_json(request.json, telegram_app.bot)
        loop.run_until_complete(telegram_app.process_update(update))
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return jsonify({"status": "error"}), 500

@app.route('/test', methods=['GET'])
def test():
    try:
        test_cases = [
            ("–ü—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
            ("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?", "—Ñ–∞–∫—Ç—ã"),
            ("–ß—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å?", "–∏—Å—Ç–æ—Ä–∏—è")
        ]
        
        results = []
        test_user = "test_user"
        
        for message, test_type in test_cases:
            response = ded_kolia.generate_response(test_user, message)
            results.append({
                "test": test_type,
                "message": message,
                "response": response
            })
        
        return jsonify({
            "status": "success",
            "database": "—Ä–∞–±–æ—Ç–∞–µ—Ç",
            "ai_available": bool(OPENROUTER_API_KEY),
            "tests": results
        }), 200
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

# ====================== –ó–ê–ü–£–°–ö ======================
def check_env_vars():
    required = [
        ('TELEGRAM_TOKEN', TELEGRAM_TOKEN),
        ('WEBHOOK_URL', WEBHOOK_URL)
    ]
    
    missing = [name for name, val in required if not val]
    if missing:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
        return False
    
    logger.info("="*50)
    logger.info(f"TELEGRAM_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_TOKEN else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"OPENROUTER_API_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENROUTER_API_KEY else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"WEBHOOK_URL: {WEBHOOK_URL}")
    logger.info(f"PORT: {PORT}")
    logger.info(f"–ú–û–î–ï–õ–¨: {MODEL_NAME}")
    logger.info("="*50)
    return True

if __name__ == '__main__':
    if not check_env_vars():
        exit(1)
    
    try:
        init_telegram()
        
        if WEBHOOK_URL:
            webhook_url = f"{WEBHOOK_URL}/telegram_webhook"
            loop.run_until_complete(telegram_app.bot.set_webhook(webhook_url))
            logger.info(f"üöÄ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
        logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
        app.run(host='0.0.0.0', port=PORT)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if telegram_app:
            loop.run_until_complete(telegram_app.stop())
            loop.run_until_complete(telegram_app.shutdown())
        loop.close()
