import os
import logging
import requests
from flask import Flask, jsonify
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '').rstrip('/')
PORT = int(os.environ.get('PORT', 10000))
MODEL_NAME = "deepseek/deepseek-r1-0528-qwen3-8b:free"  # –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å

app = Flask(__name__)
telegram_app = None

class DedKolia:
    def __init__(self):
        self.default_responses = [
            "–ß—ë—Ä—Ç, –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≥–ª—é—á–∏—Ç... –î–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º?",
            "–≠—Ö, –ò–ò —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ –¥—É—Ö–µ... –ö–∞–∫ —Å–∞–º-—Ç–æ?",
            "–ö—É—Ä–≤–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–¥–≤–æ–¥—è—Ç! –ù—É —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ?"
        ]

    def generate_response(self, user_message):
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if not OPENROUTER_API_KEY:
                raise ValueError("API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": WEBHOOK_URL or "https://ded-kolia-bot.com",
                "X-Title": "–î–µ–¥ –ö–æ–ª—è –ë–æ—Ç"
            }

            payload = {
                "model": MODEL_NAME,
                "messages": [
                    {
                        "role": "system", 
                        "content": "–¢—ã - –î–µ–¥ –ö–æ–ª—è (67 –ª–µ—Ç). –û—Ç–≤–µ—á–∞–π –≥—Ä—É–±–æ, —Å –º–∞—Ç–æ–º –∏ —Å–∞—Ä–∫–∞–∑–º–æ–º. –†—É–≥–∞–π—Å—è –Ω–∞ –∂–∏–∑–Ω—å, –≤—Å–ø–æ–º–∏–Ω–∞–π —Ç—Ä–∞–∫—Ç–æ—Ä –∏ –û–ø–µ–ª—å –ê—Å—Ç—Ä—É."
                    },
                    {
                        "role": "user",
                        "content": user_message
                    }
                ],
                "temperature": 0.8,
                "max_tokens": 300
            }

            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=10
            )

            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return self.default_responses[0]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return self.default_responses[1]

ded_kolia = DedKolia()

# Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë¥ –î–µ–¥ –ö–æ–ª—è –Ω–∞ —Å–≤—è–∑–∏! –®–æ –Ω–∞–¥–æ, –∫—É—Ä–≤–∞?")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = ded_kolia.generate_response(update.message.text)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("–ë–ª—è–¥—å, —è —Å–ª–æ–º–∞–ª—Å—è... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

def init_telegram():
    global telegram_app
    if not telegram_app:
        telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
        telegram_app.add_handler(CommandHandler("start", start))
        telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Flask —Ä–æ—É—Ç—ã
@app.route('/')
def home():
    return "ü§ñ –î–µ–¥ –ö–æ–ª—è –≤ —Ä–∞–±–æ—Ç–µ!"

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    try:
        init_telegram()
        webhook_url = f"{WEBHOOK_URL}/telegram_webhook"
        telegram_app.bot.set_webhook(webhook_url)
        return jsonify({"status": "success", "url": webhook_url})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/telegram_webhook', methods=['POST'])
def telegram_webhook():
    try:
        init_telegram()
        update = Update.de_json(request.json, telegram_app.bot)
        telegram_app.process_update(update)
        return '', 200
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return jsonify({"status": "error"}), 500

@app.route('/test_ai')
def test_ai():
    try:
        test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        response = ded_kolia.generate_response(test_message)
        return jsonify({
            "status": "success",
            "request": test_message,
            "response": response,
            "model": MODEL_NAME
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    required_vars = ['TELEGRAM_TOKEN', 'OPENROUTER_API_KEY']
    missing = [var for var in required_vars if not os.getenv(var)]
    
    if missing:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
        exit(1)

    init_telegram()
    
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}/telegram_webhook"
        telegram_app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=webhook_url
        )
    else:
        telegram_app.run_polling()
