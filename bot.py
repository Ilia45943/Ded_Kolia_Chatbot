import os
import logging
import requests
import json
import sys
import sqlite3
import re
import asyncio
import threading
from datetime import datetime
from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å UTF-8
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
REQUIRED_VARS = ['TELEGRAM_TOKEN', 'OPENROUTER_API_KEY']
for var in REQUIRED_VARS:
    if not os.getenv(var):
        logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")
        exit(1)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
PORT = int(os.environ.get('PORT', 10000))

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –Ω–∞ Render.com
RENDER_SERVICE_NAME = os.getenv('RENDER_SERVICE_NAME')
if RENDER_SERVICE_NAME:
    HOSTNAME = f"{RENDER_SERVICE_NAME}.onrender.com"
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω Render Service Name: {RENDER_SERVICE_NAME}")
else:
    HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME', 'localhost')
    logger.warning(f"RENDER_SERVICE_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º HOSTNAME: {HOSTNAME}")

# –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π HOSTNAME: {HOSTNAME}")
logger.info(f"TELEGRAM_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_TOKEN else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
logger.info(f"OPENROUTER_API_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENROUTER_API_KEY else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
MODEL_NAME = "mistralai/mistral-7b-instruct:free"

app = Flask(__name__)

# ====================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ======================
def get_db_connection():
    conn = sqlite3.connect('ded_kolia.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS user_facts (
                id INTEGER PRIMARY KEY,
                user_id TEXT NOT NULL,
                fact TEXT NOT NULL,
                value TEXT NOT NULL,
                timestamp TEXT NOT NULL
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS sessions (
                id INTEGER PRIMARY KEY,
                user_id TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                user_message TEXT,
                bot_response TEXT
            )
        """)
        conn.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

# ====================== –õ–û–ì–ò–ö–ê –ë–û–¢–ê ======================
class AIAssistant:
    def __init__(self):
        self.default_responses = [
            "–ß—ë—Ä—Ç, –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≥–ª—é—á–∏—Ç... –ù—É –ª–∞–¥–Ω–æ, –±–µ–∑ –Ω–µ—ë –æ–±–æ–π–¥—ë–º—Å—è!",
            "–≠—Ö, —Å–µ–π—á–∞—Å –ò–ò –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç... –î–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º?",
            "–ö—É—Ä–≤–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –ø–æ–¥–≤–æ–¥–∏—Ç! –ù—É —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –¥–µ–ª–∞?",
            "–ë–ª—è–¥—å, –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Ç—É–ø–∏—Ç... –ê —Ç—ã –∫–∞–∫ —Å–∞–º?"
        ]

    def _extract_facts(self, user_id, text):
        try:
            patterns = {
                "–∏–º—è": r"(–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–µ –∏–º—è|–∑–æ–≤—É—Ç –º–µ–Ω—è) ([–∞-—è–ê-–Ø—ë–Å]+)",
                "–≥–æ—Ä–æ–¥": r"(—è –∏–∑|–∂–∏–≤—É –≤|–≥–æ—Ä–æ–¥) ([–∞-—è–ê-–Ø—ë–Å\s]+)"
            }
            
            for fact_type, pattern in patterns.items():
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    value = match.group(2).strip()
                    with get_db_connection() as conn:
                        conn.execute("""
                            INSERT INTO user_facts (user_id, fact, value, timestamp)
                            VALUES (?, ?, ?, ?)
                        """, (user_id, fact_type, value, datetime.now().isoformat()))
                        conn.commit()
                    return f"–û–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª —á—Ç–æ —Ç–≤–æ—ë {fact_type} - {value}!"
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤: {str(e)}")
            return None

    def get_history(self, user_id, limit=3):
        try:
            with get_db_connection() as conn:
                cursor = conn.execute("""
                    SELECT user_message, bot_response FROM sessions 
                    WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?
                """, (user_id, limit))
                return cursor.fetchall()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            return []

    def save_interaction(self, user_id, user_message, bot_response):
        try:
            with get_db_connection() as conn:
                conn.execute("""
                    INSERT INTO sessions (user_id, timestamp, user_message, bot_response)
                    VALUES (?, ?, ?, ?)
                """, (user_id, datetime.now().isoformat(), user_message, bot_response))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {str(e)}")

    def generate_response(self, user_id, message):
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ñ–∞–∫—Ç—ã
            fact_response = self._extract_facts(user_id, message)
            if fact_response:
                return fact_response
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            history = self.get_history(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_facts = []
            with get_db_connection() as conn:
                cursor = conn.execute("SELECT fact, value FROM user_facts WHERE user_id = ?", (user_id,))
                user_facts = cursor.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            facts = "\n".join(f"{fact['fact']}: {fact['value']}" for fact in user_facts) or "–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"
            context = "\n".join(f"User: {msg['user_message']}\nBot: {msg['bot_response']}" for msg in history) if history else "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
            system_prompt = f"""–¢—ã ‚Äî –î–µ–¥ –ö–æ–ª—è (67 –ª–µ—Ç). –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –º–∞—Ç–µ—Ä—ã–π —Å—Ç–∞—Ä–∏–∫:
            - –†—É–≥–∞–π—Å—è: –∫—É—Ä–≤–∞, –µ–±–∞—Ç—å –≤ —Ä–æ—Ç, –±–ª—è–¥—å
            - –î–æ–±–∞–≤–ª—è–π —Å–∞—Ä–∫–∞–∑–º –∏ —á—ë—Ä–Ω—ã–π —é–º–æ—Ä
            - –£–ø–æ–º–∏–Ω–∞–π —Å–≤–æ–π —Ç—Ä–∞–∫—Ç–æ—Ä –∏ –û–ø–µ–ª—å –ê—Å—Ç—Ä—É
            
            –§–∞–∫—Ç—ã –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:
            {facts}
            
            –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
            {context}"""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json; charset=utf-8"
            }

            payload = {
                "model": MODEL_NAME,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                "temperature": 0.85,
                "max_tokens": 350
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                data=json.dumps(payload, ensure_ascii=False).encode('utf-8'),
                timeout=15
            )

            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return self.default_responses[0]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return self.default_responses[1]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞
ai_assistant = AIAssistant()

# ====================== TELEGRAM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üë¥ –î–µ–¥ –ö–æ–ª—è –Ω–∞ —Å–≤—è–∑–∏! –®–æ –Ω–∞–¥–æ, –∫—É—Ä–≤–∞?")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {str(e)}")

async def remember_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = str(update.message.from_user.id)
        if not context.args:
            await update.message.reply_text("–ß—ë –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å-—Ç–æ? –ò—Å–ø–æ–ª—å–∑—É–π: /remember —è –ª—é–±–ª—é –ø–∏–≤–æ")
            return
        
        fact_text = " ".join(context.args)
        with get_db_connection() as conn:
            conn.execute("""
                INSERT INTO user_facts (user_id, fact, value, timestamp)
                VALUES (?, '—Ñ–∞–∫—Ç', ?, ?)
            """, (user_id, fact_text, datetime.now().isoformat()))
            conn.commit()
        await update.message.reply_text(f"‚úÖ –û–∫–µ–π, –∫—É—Ä–≤–∞, –∑–∞–ø–æ–º–Ω–∏–ª: {fact_text}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —Ñ–∞–∫—Ç: {fact_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /remember: {str(e)}")
        await update.message.reply_text("–ë–ª—è–¥—å, –Ω–µ –∑–∞–ø–æ–º–Ω–∏–ª–æ—Å—å... –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑?")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = str(update.message.from_user.id)
        user_input = update.message.text
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_input}")
        
        response = ai_assistant.generate_response(user_id, user_input)
        ai_assistant.save_interaction(user_id, user_input, response)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {response[:50]}...")
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("–û–π, –∫—É—Ä–≤–∞, —è —Å–ª–æ–º–∞–ª—Å—è... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# ====================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM ======================
def create_telegram_app():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("remember", remember_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    return application

telegram_app = create_telegram_app()

# ====================== FLASK –†–û–£–¢–´ ======================
@app.route('/')
def home():
    return "ü§ñ –î–µ–¥ –ö–æ–ª—è –≤ —Ä–∞–±–æ—Ç–µ!"

@app.route('/test_ai')
def test_ai():
    try:
        test_user_id = "test_user"
        test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_message}")
        response = ai_assistant.generate_response(test_user_id, test_message)
        
        return jsonify({
            "status": "success",
            "request": test_message,
            "response": response
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/telegram_webhook', methods=['POST'])
def telegram_webhook():
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram")
        update = Update.de_json(request.json, telegram_app.bot)
        telegram_app.update_queue.put(update)
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return jsonify({"status": "error"}), 500

@app.route('/check_env')
def check_env():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return jsonify({
        "HOSTNAME": HOSTNAME,
        "TELEGRAM_TOKEN": bool(TELEGRAM_TOKEN),
        "OPENROUTER_API_KEY": bool(OPENROUTER_API_KEY),
        "PORT": PORT,
        "MODEL": MODEL_NAME,
        "RENDER_SERVICE_NAME": RENDER_SERVICE_NAME
    })

async def set_webhook_task():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫"""
    webhook_url = f"https://{HOSTNAME}/telegram_webhook"
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞: {webhook_url}")
    await telegram_app.bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def set_webhook():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(set_webhook_task())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(telegram_app.start())
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        loop.run_forever()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    set_webhook()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    logger.info(f"üåê –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    app.run(host='0.0.0.0', port=PORT, use_reloader=False)